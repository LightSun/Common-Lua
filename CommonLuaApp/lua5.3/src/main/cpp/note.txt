

lua原始修改点: HEAVEN7 start

[1], add "config.h"

== add lua_internal.h ========
============= 1 ===================
lbaselib.c:  luaB_print 函数
    loadlib.c
    //============= self ==========
      if(filename == NULL){
        filename = getLuaFilename(name);
      }
    //============ end self =======
    lbaselib.c :    {"dumpStack", luaB_dumpStack},

====================

add  lua/config.h

any 'start h7'
============lua.h ==========
add #include "config.h"

----------------- 为解决Lua同步问题 sync ----------------
========= lstate.h ================
在global_State结构体中增加
  pthread_mutex_t lock;

lstate.c 中 close_state方法添加2行：
  pthread_mutex_unlock(&g->lock);
  pthread_mutex_destroy(&g->lock);

========== llimits.h =======
替换lua_lock 和 lua_unlock 实现
  // #define lua_lock(L)	((void) 0)
  // #define lua_unlock(L)	((void) 0)

#include "pthread.h"
#define lua_lock(L) pthread_mutex_lock(&(G(L)->lock));
#define lua_unlock(L) pthread_mutex_unlock(&(G(L)->lock));
--------------------- end sync ------------------

======== lua bug fixed ===========
in lgc.c :  in function 'clearkeys'

================= 迁移pthread到 config.h ===========
增加宏： __USE_PTHREAD

========================= add luaL_openlibs2 ======================
//=============== HEAVEN7 start =================
LUALIB_API void luaL_openlibs2(lua_State *L, const luaL_Reg libs[]);
//=============== HEAVEN7 end =================


================ update to lua 5.4 ==============
在lstate.h中，对GlobalState结构新加一个成员:

pthread_mutex_t lock;

然后在lua_newstate中添加初始化代码:

pthread_mutex_init(&g->lock, NULL);

接着重定义lock/unlock宏（写在原定义前面即可）：

#define lua_lock(L) pthread_mutex_lock(&(G(L)->lock));

#define lua_unlock(L) pthread_mutex_unlock(&(G(L)->lock));

最后在close_state函数的末尾添加两行：


static void close_state (lua_State *L) {
  global_State *g = G(L);
  luaF_close(L, L->stack);  /* close all upvalues for this thread */
  luaC_freeallobjects(L);  /* collect all objects */
  luaM_freearray(L, G(L)->strt.hash, G(L)->strt.size);
  luaZ_freebuffer(L, &g->buff);
  freestack(L);
  lua_assert(gettotalbytes(g) == sizeof(LG));
 pthread_mutex_unlock(&g->lock);
 pthread_mutex_destroy(&g->lock);
  (*g->frealloc)(g->ud, fromstate(L), sizeof(LG), 0);  /* free main block */
}

============================================================

change:  stat = system(cmd);
to:      stat = run_cmd(cmd);